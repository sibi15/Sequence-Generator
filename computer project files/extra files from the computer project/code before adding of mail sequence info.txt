# main program:


import mysql.connector
from time import perf_counter, sleep
import time

start=time.perf_counter()                            # for time complexity of the program

import sys
import ssl
import smtplib


# NON-IMPORTED MODULES:

def ask_choice2():                                             # function defined here rather than importing ask_choice2 because of variable problem (while return value is assigned to some variable y, here.)
    print('\nOptions:')
    time.sleep(1)                                              # this function is a choice for going back to main choice or for going back to sequence information choice. 
    print('1. Go back to main choice: ')
    print('2. Go back to sequence information choices: ')
    print('3. EXIT: ')
    #print('4. Suggestion for adding sequences: ')
    
    time.sleep(2)
    k=0
    try:
        #global ch3
        ch3=int(input('Please enter a choice (1-3): '))
        time.sleep(2)
        for i in range(0,5):
            if ch3<1:
                time.sleep(1)
                print('Your choice is less than 1.')
                time.sleep(1)
                ch3=int(input('Please enter a numerical choice in the range (1-3): '))
                k+=1
            elif ch3>3:     
                time.sleep(1)
                print('Your choice is greater than 3.')
                time.sleep(1)
                ch3=int(input('Please enter a numerical choice in the range (1-3): '))
                k+=1
            elif ch3==1:
                pass
            elif ch3==2:
                pass
            elif ch3==3:    # add that suggestion here
                time.sleep(1)
                suggestion()                                                                # SUGGESTION usage before defined, might give error
                time.sleep(2)
                send_filetranscript()
                time.sleep(2)
                end=time.perf_counter()
                time1=end-start
                print('Thank you for visiting!                                                                        > Time elapsed: ',time1)
                time.sleep(1)
                sys.exit()
            if k==4:
                time.sleep(1)
                end=time.perf_counter()
                time1=end-start
                print('Maximum no. of attempts crossed, program exiting.                                              > Time elapsed: ',time1)
                time.sleep(1)
                sys.exit()
    except ValueError:
        time.sleep(1)
        end=time.perf_counter()
        time1=end-start
        print('Wrong input, program exiting.                                                                > Time elapsed: ', time1)
        time.sleep(1)
        sys.exit()
        #print('\n')
    return ch3                                                # return value stored in some variable for easier access
                

def ask_choice3():                                            # this function is a choice for going back to main choice or for going back to sequence generation choice.
    print('\nOptions:')
    time.sleep(1)
    print('1. Go back to main choice: ')
    print('2. Go back to sequence generation choices: ')
    print('3. EXIT: ')

    time.sleep(2)
    k=0
    try:
        ch5=int(input('Please enter a choice in the range (1-3): '))
        time.sleep(2)
        for i in range(0,5):
            if ch5<1:
                time.sleep(1)
                print('Your choice is less than 1. ')
                time.sleep(1)
                ch5=int(input('Please enter a numerical choice in the range (1-3): '))
                k+=1
            elif ch5>3:
                time.sleep(1)
                print('Your choice is greater than 3. ')
                time.sleep(1)
                ch5=int(input('Please enter a numerical choice in the range (1-3): '))
                k+=1
            elif ch5==1:
                pass
            elif ch5==2:
                pass
            elif ch5==3:
                time.sleep(1)
                suggestion()
                time.sleep(2)
                send_filetranscript()
                time.sleep(2)
                end=time.perf_counter()
                time1=end-start
                print('Thank you for visiting!                                                                        > Time elapsed: ',time1)
                time.sleep(1)
                sys.exit()
            if k==4:
                time.sleep(1)
                end=time.perf_counter()
                time1=end-start
                print('Maximum no. of attempts crossed, program exiting.                                              > Time elapsed: ',time1)
                time.sleep(1)
                sys.exit()
    except ValueError:
        time.sleep(1)
        end=time.perf_counter()
        time1=end-start
        print('Wrong input, program exiting.                                                                > Time elapsed: ', time1)
        time.sleep(1)
        sys.exit()
        #print('\n')
    return ch5




# CONNECTION AND CURSOR OBJECT INSTANTIATION:

con=mysql.connector.connect(host='localhost', user='root', password='kobe_24@lakers_8_2_messi_10', database='test')
if con.is_connected():
    print('Connection successful')

cur=con.cursor()   #cursor object:



# SUGGESTION MODULE (Cursor object needed, hence defined here after the cursor object is instantiated):

def suggestion():           # call this function at every exit point except for the input error exits:
    time.sleep(1)
    sug=input('\nSUGGESTION: Would you like to provide a suggestion for a sequence to add? (y/n) ')
    time.sleep(2)
#   n=int(input('Please enter the no. of suggestions you want to provide: '))
#   time.sleep(2)
    if sug=='y':
        n=int(input('Please enter the no. of suggestions you want to provide: '))
        time.sleep(1)
        for i in range(1,n+1):
            name=input('Enter sequence name suggestion: ')
            query1=("insert into suggestions values('{}')".format(name))
            cur.execute(query1)
            con.commit()
            time.sleep(1)
            print('Suggestion accepted successfully.\n')
    elif sug=='n':
        pass
    else:
        print('Wrong input, try again. \n')
        time.sleep(1)
        suggestion()        # Recurssion
        

#suggestion()

# TRANSCRIPT:   # only variable is the mail ID


def send_filetranscript():
    time.sleep(2)
    tr=input('\nTRANSCRIPT: Would you like to receive a mail regarding the transcript of the shell window? (y/n) ')
    time.sleep(2)
    if tr=='n':
        pass
    elif tr=='y':
        n=int(input('Enter no. of mails to be sent to the same, or different addresses: '))              # n and message are fixed
        time.sleep(2)
        message=input('Please copy the text in the shell window above, paste it here and enter: ')       
        time.sleep(2)

        port=465
        smtp_server="smtp.gmail.com"
        sender_email="04250@asianintlschool.com"
        password="sibikarthik260104"
#       context=ssl.create_default_context()
        for i in range(1,n+1):
            context=ssl.create_default_context()
            receiver_email=input('Please enter email address to send the shell window transcript to: ')
            with smtplib.SMTP_SSL(smtp_server, port, context=context) as server:
                print('Sending mail',i)
                #try:
                server.login(sender_email, password)
                server.sendmail(sender_email, receiver_email, message)
                #except SMTPAuthenticationError:
                print('Mail sent.')
    else:
        print('Wrong input, try again. \n')
        time.sleep(1)
        send_filetranscript()
        
##
##    context=ssl.create_default_context()
##    with smtplib.SMTP_SSL(smtp_server, port, context=context) as server:
##        print('Sending mail ',i)
##        server.login(sender_email, password)
##        server.sendmail(sender_email, receiver_email, message)
##        print('Mail sent.')







#INTRODUCTION:

time.sleep(2)
print('--------------------------------------------------------------------------------------------------------------------------------------------------------------\n')
time.sleep(2)
print('                                                            ----- SEQUENCE GENERATOR -----\n')
time.sleep(2)
print('--------------------------------------------------------------------------------------------------------------------------------------------------------------\n')
time.sleep(2)
print('----------------------------------------------------------------------------------------------------')
time.sleep(2)
print('| * NOTE:                                                                                          |')
time.sleep(2)
print('| - When the program asks for your input, please type the input and press the ENTER key.           |')
time.sleep(2)
print("| - If you want to exit the program immediately at any point, please use the command 'CTRL+C'.     |")
time.sleep(2)
print('----------------------------------------------------------------------------------------------------\n')
time.sleep(6)

print('Options:')
time.sleep(2)
print('      |')
print('      |')
time.sleep(2)
print('      |---> 1. SEQUENCE INFORMATION')
time.sleep(2)
print('      |')
print('      |')
time.sleep(2)
print('      |---> 2. SEQUENCE GENERATION')
time.sleep(2)
print('      |')
print('      |')
time.sleep(2)
print('      |---> 3. EXIT')
time.sleep(2)
print('                  |')
print('                  |')
time.sleep(2)
print('                  |---> SUGGESTION TO ADD SEQUENCES')
time.sleep(2)
print('                  |---> FILE TRANSCRIPT\n')
time.sleep(2)
      


print('- The following is the table of sequences within which you may ask the given operations to be performed: ', '\n')
time.sleep(4)
print('(S_no:', ' Sequence Name:', ' Year of Discovery:)', sep=' ', end='\n')
time.sleep(3)

query=('select * from sequences')               # prints table 
cur.execute(query)
data1=cur.fetchall()
#print('\n')
for i in data1:
    time.sleep(1)
    print(i,'\n')
time.sleep(2)
print('--------------------------------------------------------------------------------------------------------------------------------------------------------------\n')
time.sleep(2)







# USER INPUT:

while True:                                                                                 # This is for the choice twice back or once back (corresponds to the breaks)

    print('\nOperations: ')
    time.sleep(2)

    print('1. Display Information of Sequences: ')
    print('2. Choose sequence to work with (generation): ')
    print('3. EXIT:', '\n')
    time.sleep(4)
    print('Attempts = 5\n')
    time.sleep(2)
    

    j=0
    try:
        ch1=int(input('Please enter a choice (1-3): '))                                     # Choosing of operation to perform:
        time.sleep(2)
        for i in range(0,5):                                                                # Gives user 5 attempts to enter a number in the range (1-3):
            if ch1<1:
                time.sleep(1)
                print('Your choice is less than 1.')
                time.sleep(1)
                ch1=int(input('Please enter a numerical choice in the range (1-3): '))
                j+=1
            elif ch1>3:
                time.sleep(1)
                print('Your choice is greater than 3.')
                time.sleep(1)
                ch1=int(input('Please enter a numerical choice in the range (1-3): '))
                j+=1
            elif ch1==1:
                break
            elif ch1==2:
                break
            elif ch1==3:
                #print('Thank you for visiting! ')
                #sys.exit()
                #break
                pass
            if j==4:
                time.sleep(1)
                end=time.perf_counter()
                time1=end-start
                print('Maximum no. of attempts crossed, program exiting.                                              > Time elapsed: ',time1)
                time.sleep(1)
                sys.exit()
    except ValueError:                                                                        # If data type other than an integer is inputed: (exits program)
        time.sleep(1)
        end=time.perf_counter()
        time1=end-start
        print('Wrong input, program exiting.                                                                > Time elapsed: ', time1)
        time.sleep(1)
        sys.exit()

    if ch1==1:                                                                                # may have to remove this part for neatness
        print('\n--> Your choice is (1. Display Information of Sequences: )\n')
    elif ch1==2:
        print('\n--> Your choice is (2. Choose sequence to work with (generation): )\n')
    elif ch1==3:
        print('\n--> Your choice is (3. EXIT: )\n')
    time.sleep(3)







# WHAT TO DO DEPENDING ON THE INPUTS:

# (i) choice 1 for INFO DISPLAY:
   
    #from askchoice2 import ask_choice2                                                       # main choice
    #from askchoice1 import ask_choice1                                                       # sub choice (may not be required)
    

# starts here

    if ch1==1:                                                                                # choice for DFH information display
        print('--------------------------------------------------------------------------------------------------------------------------------------------------------------\n')
        print('(S_no:', ' Sequence Name:', ' Year of Discovery:)', sep=' ', end='\n')
        time.sleep(2)
        query=('select * from sequences')                                                     # prints table 
        cur.execute(query)
        data1=cur.fetchall()
        for i in data1:
            time.sleep(1)
            print(i,'\n')
        time.sleep(2)
        r=cur.rowcount                                                                        # counts no. of rows retrieved
        print("- Here, you'll get to know the information, history and why these sequences are important.(?) ")
        time.sleep(3)

        
        while True:                                                                             # while loop(secondary/sub) for program to ask for user input to perform operations until EXIT is pressed. 

            k=0
            print('\nEnter a choice when prompted corresponding to the serial number of each sequence ( 1 -', r,') :')                    # range as per no. of rows retrieved
            time.sleep(2.5)
            try:
                ch2=int(input('Please enter choice here: '))
                time.sleep(1)
                for i in range(0,5):                                                                # Gives user 5 attempts to enter a number in the range (1-3):
                    if ch2<1:
                        time.sleep(1)
                        print('Your choice is less than 1.')
                        time.sleep(1)
                        ch2=int(input('Please enter a numerical choice in the range (1-6): '))
                        k+=1
                    elif ch2>6:
                        time.sleep(1)
                        print('Your choice is greater than 3.')
                        time.sleep(1)
                        ch2=int(input('Please enter a numerical choice in the range (1-6): '))
                        k+=1
                    elif ch2==1:
                        pass
                    elif ch2==2:
                        pass
                    elif ch2==3:
                        pass
                    elif ch2==4:
                        pass
                    elif ch2==5:
                        pass
                    elif ch2==6:
                        pass
                    if j==4:
                        time.sleep(1)
                        end=time.perf_counter()
                        time1=end-start
                        print('Maximum no. of attempts crossed, program exiting.                                              > Time elapsed: ',time1)
                        time.sleep(1)
                        sys.exit()
##                      else:
##                          sys.exit()
            except ValueError:                                                                      # If data type other than an integer is inputed: (exits program)
                time.sleep(1)
                end=time.perf_counter()
                time1=end-start
                print('Wrong input, program exiting.                                                                > Time elapsed: ', time1)
                time.sleep(1)
                sys.exit()

            print('\n--------------------------------------------------------------------------------------------------------------------------------------------------------------\n')
            time.sleep(3)


            if ch2==1:                                                                                                   # FIRST SEQUENCE
                file1=open('C:/Users/sibik/OneDrive/Desktop/computer project files/fibonaccinumbers.txt','r')
                r1=file1.readlines()
                for i in r1:
                    print(i.strip())                       # or rstrip()
                print('\n--------------------------------------------------------------------------------------------------------------------------------------------------------------')
                time.sleep(2)
                y=ask_choice2()                            # ask_choice2()[0] (return value as tuple)
                if y==1:                                   # to get the first element in the tuple (ch3) of the return value for the function
                    break
                elif y==2:                                 # this elif statement is being executed when ch2 is not 1:, problem to check:
                    continue                               # this statement has to be made to go back to the starting of second while loop, check PROGRAMWIZ CONTINUE STATEMENT

           

            elif ch2==2:                                                                                                 # SECOND SEQUENCE
                file2=open('C:/Users/sibik/OneDrive/Desktop/computer project files/prime numbers.txt','r')
                r2=file2.readlines()
                for i in r2:
                    print(i.strip())
                print('\n--------------------------------------------------------------------------------------------------------------------------------------------------------------')
                time.sleep(2)
                y=ask_choice2()
                if y==1:
                    break
                elif y==2:                                 
                    continue

                

            elif ch2==3:                                                                                                 # THIRD SEQUENCE
                file3=open('C:/Users/sibik/OneDrive/Desktop/computer project files/collatz sequence.txt','r')
                r3=file3.readlines()
                for i in r3:
                    print(i.strip())
                print('\n--------------------------------------------------------------------------------------------------------------------------------------------------------------')
                time.sleep(2)
                y=ask_choice2()
                if y==1:
                    break
                elif y==2:                                 
                    continue

                

            elif ch2==4:
                file4=open('C:/Users/sibik/OneDrive/Desktop/computer project files/pascal triangle numbers.txt','r')     # FOURTH SEQUENCE
                r4=file4.readlines()
                for i in r4:
                    print(i.strip())
                print('\n--------------------------------------------------------------------------------------------------------------------------------------------------------------')
                time.sleep(2)
                y=ask_choice2()
                if y==1:
                    break
                elif y==2:                                 
                    continue

                
  
            elif ch2==5:
                file5=open('C:/Users/sibik/OneDrive/Desktop/computer project files/pentagonal numbers.txt','r')           # FIFTH SEQUENCE
                r5=file5.readlines()
                for i in r5:
                    print(i.strip())
                print('\n--------------------------------------------------------------------------------------------------------------------------------------------------------------')
                time.sleep(2)
                y=ask_choice2()
                if y==1:
                    break
                elif y==2:                                 
                    continue

                

            elif ch2==6:
                file6=open('C:/Users/sibik/OneDrive/Desktop/computer project files/fermat numbers.txt','r')               # SIXTH SEQUENCE
                r6=file6.readlines()
                for i in r6:
                    print(i.strip())
                print('\n--------------------------------------------------------------------------------------------------------------------------------------------------------------')
                time.sleep(2)
                y=ask_choice2()
                if y==1:
                    break
                elif y==2:                                 
                    continue



# just instantiate the ch3 value else only the file 1 will be printed and others will not due to the else statement for the continue as in line with "if ch3==1:"



# (ii) choice 2 for SEQUENCE GENERATION:    # need to do for trigonal sequence:

    # from fibonaccifunction import fibonacci_n
    # from fibonaccifunction(user) import fibonacci
    # from primenumbersfunction import prime
    # from collatzfunction import collatz
    # from fermatfunction import fermat
    # from fermatprimefunction import is_prime, collatz_prime


# starts here

    elif ch1==2:
        print('--------------------------------------------------------------------------------------------------------------------------------------------------------------\n')
        time.sleep(1.5)
        print('Here, you can generate any of the given sequences. ')
        time.sleep(2)
        print('1. Fibonacci Numbers ')
        time.sleep(1)
        print('2. Prime Numbers ')
        time.sleep(1)
        print('3. Collatz Sequence ')
        time.sleep(1)
        print('4. Pascal Triangle Numbers ')
        time.sleep(1)
        print('5. Pentagonal Numbers ')
        time.sleep(1)
        print('6. Fermat Numbers ')
        time.sleep(1)

        while True:
            time.sleep(2)
            print('Please enter choice when prompted. ')
            time.sleep(2)
            m=0
            try:
                ch4=int(input('Please enter choice for the sequence you wish to generate: '))
                for i in range(0,5):
                    if ch4==1:
                        pass
                    elif ch4==2:
                        pass
                    elif ch4==3:
                        pass
                    elif ch4==4:
                        pass
                    elif ch4==5:
                        pass
                    elif ch4==6:
                        pass
                    elif ch4<1:
                        time.sleep(1)
                        print('Your choice is less than 1.')
                        time.sleep(1)
                        ch4=int(input('Please enter a numerical choice in the range (1-6): '))
                        m+=1
                    elif ch4>6:
                        time.sleep(1)
                        print('Your choice is more than 6.')
                        time.sleep(1)
                        ch4=int(input('Please enter a numerical choice in the range (1-6): '))
                        m+=1
                    if m==4:
                        time.sleep(1)
                        end=time.perf_counter()
                        time1=end-start
                        print('Maximum no. of attempts crossed, program exiting.                                              > Time elapsed: ',time1)
                        time.sleep(1)
                        sys.exit()
    ##                else:
    ##                    sys.exit()
            except ValueError:
                time.sleep(1)
                end=time.perf_counter()
                time1=end-start
                print('Wrong input, program exiting.                                                                > Time elapsed: ', time1)
                time.sleep(1)
                sys.exit()

            time.sleep(1)
            print('\n--------------------------------------------------------------------------------------------------------------------------------------------------------------\n')
            time.sleep(3)

            if ch4==1:                                              # Fibonacci Sequence
                from fibonaccifunction import fibonacci_n
                print('\n--------------------------------------------------------------------------------------------------------------------------------------------------------------')
                time.sleep(2)
                z=ask_choice3()
                if z==1:
                    break
                elif z==2:
                    continue

            elif ch4==2:                                            # Prime Numbers
                from primenumbersfunction import prime
                print('\n--------------------------------------------------------------------------------------------------------------------------------------------------------------')
                time.sleep(2)
                z=ask_choice3()
                if z==1:
                    break
                elif z==2:
                    continue

            elif ch4==3:                                            # Collatz Sequence
                from collatzfunction import collatz
                print('\n--------------------------------------------------------------------------------------------------------------------------------------------------------------')
                time.sleep(2)
                z=ask_choice3()
                if z==1:
                    break
                elif z==2:
                    continue

            elif ch4==4:
                pass                                                # need to find logic

            elif ch4==5:
                from pentagonalnumbers import pentagonal
                print('\n--------------------------------------------------------------------------------------------------------------------------------------------------------------')
                time.sleep(2)
                z=ask_choice3()
                if z==1:
                    break
                elif z==2:
                    continue

            elif ch4==6:                                            # Fermat Numbers
                from fermatfunction import fermat
                print('\n--------------------------------------------------------------------------------------------------------------------------------------------------------------')
                time.sleep(2)
                z=ask_choice3()
                if z==1:
                    break
                elif z==2:
                    continue

            
                

# (iii) choice 3 for EXITING: (All exit points other than the input error ones have the suggestion and file transcript functions):           
                
            
    elif ch1==3:
        suggestion()                                    # ask for suggestions of sequences to add
        time.sleep(2)
        send_filetranscript()
        time.sleep(2)
        end=time.perf_counter()
        time1=end-start
        print('Thank you for visiting!                                                                        > Time elapsed: ',time1)
        time.sleep(1)
        sys.exit()
